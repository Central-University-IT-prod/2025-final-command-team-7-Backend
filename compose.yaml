services:
  app:
    image: REDACTED:5050/team-7/backend:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      bot:
        condition: service_started
    environment:
      POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@postgres:5432/postgres
      AWS_ENDPOINT_URL: http://minio:9000/
      AWS_KEY_ID: minioadmin
      AWS_ACCESS_KEY: minioadmin
      FILES_BASE_URL: https://prod-team-7-s35as4hl.REDACTED/files
    ports:
      - 8080:8080
    env_file: ${ENV_FILE}

  bot:
    image: REDACTED:5050/team-7/backend:latest
    restart: always
    command: ["python", "-m", "bot"]
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    environment:
      POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@postgres:5432/postgres
      JWT_SECRET: qwerty
      AWS_ENDPOINT_URL: http://minio:9000/
      AWS_KEY_ID: minioadmin
      AWS_ACCESS_KEY: minioadmin
      FILES_BASE_URL: https://prod-team-7-s35as4hl.REDACTED/files
    env_file: ${ENV_FILE}

  migrations:
    image: REDACTED:5050/team-7/backend:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DSN: postgresql+asyncpg://postgres:postgres@postgres:5432/postgres
    command: ["alembic", "upgrade", "head"]

  postgres:
    image: docker.io/postgres:17.3-alpine3.21
    environment:
      POSTGRES_PASSWORD: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 15s
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data

  minio-init:
    image: docker.io/minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/files;
      /usr/bin/mc anonymous set download myminio/files;
      exit 0;
      "

  minio:
    image: docker.io/minio/minio:latest
    command: ["server", "/data"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 15s
    ports:
      - 9000:9000
    volumes:
      - minio-data:/data

volumes:
  postgres-data:
  minio-data:
